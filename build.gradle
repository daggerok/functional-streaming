buildscript {
    ext {
        //environmentFileDir = "profiles"
        //propertiesPluginEnvironmentNameProperty = "env"
    }
}

plugins {
    id "idea"
    //id "base"
    //id "net.saliman.properties" version "1.4.6"
    id "com.avast.gradle.docker-compose" version "0.6.13"
}

def profile = project.hasProperty("profile") ? project.getProperty("profile") : "rabbit"
def profiles = ["kafka", "rabbit"]
if (!profiles.contains(profile)) {
    throw new GradleException("""
        profile $profile is not supported.
        supported profiles: $profiles
    """)
}

println "active profile is: $profile"

def libs = [
        "streaming-support",
]

tasks.create("install") { task ->
    libs.each { projectName ->
        dependsOn gradle.includedBuild(projectName).task(":install")
    }
}

def projectNames = [
        "streaming-schema-registry-server",
        "streaming-producer",
        "streaming-processor",
        "streaming-aggregator",
        "streaming-consumer",
        "streaming-reactive-producer",
        "streaming-reactive-aggregator",
//        "streaming-reactive-processor",
        "streaming-reactive-consumer",
]

// gradle clean build
def previous = ":clean"

["clean", "assemble", "test", "check", "build"].each { taskName ->

    tasks.create(taskName) { task ->

        def current = ":$taskName"

        projectNames.each { projectName ->

            def projectBuild = gradle.includedBuild(projectName)
            def projectTask = projectBuild.task(current)

            dependsOn projectTask, ":install"

            if (":test" == current || ":bootRun" == current) {
                dependsOn "composeUp"
                shouldRunAfter "composeUp"
            }

            if (":clean" == previous) return
            shouldRunAfter previous
        }
        previous = current
    }
}

/**
 * Spring bootRun: gradle composeUp bootRun-producer
 */

projectNames.each { projectName ->

    def bootRunTaskName = "bootRun"
    def taskName = projectName.replace("streaming", bootRunTaskName)

    tasks.create(taskName) { task ->
        dependsOn "composeUp", gradle.includedBuild(projectName).task(":$bootRunTaskName")
    }
}

/**
 * Docker brokers: gradle test -Penv=rabbit
 */
dockerCompose {
    useComposeFiles = [project.file("docker/${profile}/docker-compose.yaml")]
    // captureContainersOutput = true
    captureContainersOutput = false
    stopContainers = true
    removeContainers = true
    removeImages = "Local"
    removeVolumes = true
    removeOrphans = true
    forceRecreate = true
    waitForTcpPorts = false
    projectName = project.name
}

composeUp.dependsOn assemble

task integrationTests {
    dependsOn "composeUp"
    shouldRunAfter "composeUp"
    finalizedBy "composeDown"
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.6-rc-2"
}

defaultTasks "assemble", "composeUp", "test"
