buildscript {
    ext {
        environmentFileDir = "profiles"
        propertiesPluginEnvironmentNameProperty = "env"
    }
}

plugins {
    id "idea"
    id "net.saliman.properties" version "1.4.6"
}

// inherit tasks from projects
def projectNames = [
        "streaming-service",
        "streaming-client"
]

// gradle clean build
def previous = ":clean"

["clean", "assemble", "test", "check" , "build"].each { taskName ->

    tasks.create(taskName) { task ->

        def current = ":$taskName"

        projectNames.each { projectName ->

            def projectBuild = gradle.includedBuild(projectName)
            def projectTask = projectBuild.task(current)

            dependsOn projectTask

            if (":clean" == previous) return
            shouldRunAfter previous
        }
        previous = current
    }
}

// gradle bootRun-service bootRun-client
projectNames.each { projectName ->

    def bootRunTaskName = "bootRun"
    def taskName = projectName.replace("streaming", bootRunTaskName)

    tasks.create(taskName) { task ->
        dependsOn gradle.includedBuild(projectName).task(":$bootRunTaskName")
    }
}

def dockerCompose = "docker-compose -f $dockerComposeFile"

task composeUp(type: Exec) {
    executable "bash"
    args "-c", """
                    $dockerCompose down -v \
                    && $dockerCompose up -d --build \
                    && echo "waiting 15 seconds for kafka bootstrap..." \
                    && sleep 15
               """
}

task composeDown(type: Exec) {
    executable "bash"
    args "-c", "$dockerCompose down -v"
}

task integrationTests(dependsOn: ":test") {
    dependsOn composeUp
    finalizedBy composeDown
}
