buildscript {
    ext {
        environmentFileDir = "profiles"
        propertiesPluginEnvironmentNameProperty = "env"
    }
}

plugins {
    id "idea"
    id "net.saliman.properties" version "1.4.6"
}

def profiles = ["kafka", "rabbit"]

if (!profiles.contains(profile)) {
    throw new GradleException("""
        profile $profile is not supported.
        supported profiles: $profiles
    """)
}

println "active profile is: $profile"

def libs = [
        "streaming-support",
]

tasks.create("install") { task ->
    libs.each { projectName ->
        dependsOn gradle.includedBuild(projectName).task(":install")
    }
}

def projectNames = [
        "streaming-schema-registry-server",
        "streaming-producer",
        "streaming-processor",
        "streaming-aggregator",
        "streaming-consumer",
        "streaming-reactive-producer",
        "streaming-reactive-aggregator",
        "streaming-reactive-processor",
        "streaming-reactive-consumer",
]

// gradle clean build
def previous = ":clean"

["clean", "assemble", "test", "check", "build"].each { taskName ->

    tasks.create(taskName) { task ->

        def current = ":$taskName"

        projectNames.each { projectName ->

            def projectBuild = gradle.includedBuild(projectName)
            def projectTask = projectBuild.task(current)

            dependsOn projectTask, ":install"

            if (":clean" == previous) return
            shouldRunAfter previous, ":composeUp"
        }
        previous = current
    }
}

/**
 * Spring bootRun: gradle composeUp bootRun-producer
 */

projectNames.each { projectName ->

    def bootRunTaskName = "bootRun"
    def taskName = projectName.replace("streaming", bootRunTaskName)

    tasks.create(taskName) { task ->
        dependsOn gradle.includedBuild(projectName).task(":$bootRunTaskName")
    }
}

/**
 * Docker brokers: gradle test -Penv=rabbit
 */

def dockerCompose = "docker-compose -f $dockerComposeFile"

task composeUp(type: Exec) {
    executable "bash"
    args "-c", """
                    $dockerCompose down -v \
                    && $dockerCompose up -d --build \
                    && echo "waiting 15 seconds for $profile bootstrap..." \
                    && sleep 15
               """
}

task composeDown(type: Exec) {
    executable "bash"
    args "-c", "$dockerCompose down -v"
}

/**
 * Integration tests: gradle integrationTests
 */

task integrationTests(dependsOn: ":test") {
    dependsOn composeUp
    finalizedBy composeDown
}

task wrapper(type: Wrapper) {
    gradleVersion = "3.5"
}
